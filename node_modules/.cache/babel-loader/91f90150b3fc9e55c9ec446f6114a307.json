{"ast":null,"code":"var _jsxFileName = \"/Users/gigiz/Documents/Test-App/src/App.js\";\nimport React, { Component } from 'react';\nimport Header from './components/header';\nimport './App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.getReports = async () => {\n      const response = await fetch('https://bc-refunded-orders.herokuapp.com/all');\n      const ordersData = await response.json();\n      this.setState({\n        mainData: {\n          orders: ordersData.v3.data,\n          provider_id: ordersData.v2\n        }\n      }); // console.log(this.state.mainData)\n      // console.log(this.state.provider_id)\n\n      let orders = this.state.mainData.orders.map(order => ({\n        ID: order.id,\n        Order_ID: order.order_id,\n        Date: order.created,\n        Amount: \"$ \".concat(order.total_amount),\n        Payment_Provider_Name: order.payments[0].provider_id,\n        Payment_Provider_ID: this.state.mainData.provider_id.map(v2_Order => order.order_id === v2_Order.id ? v2_Order.payment_provider_id : '').toString().replace(\",\", \"\"),\n        Refund_Reason: order.reason\n      })); // console.log(orders)\n\n      const objectToCsv = order => {\n        const csvRows = [];\n        const headers = Object.keys(order[0]);\n        csvRows.push(headers);\n\n        for (const row of order) {\n          const values = headers.map(header => {\n            const escaped = ('' + row[header]).replace(/\"/g, '\\\\\"');\n            return \"\\\"\".concat(escaped, \"\\\"\");\n          });\n          csvRows.push(values);\n        }\n\n        return csvRows.join('\\n');\n      };\n\n      let csvData = objectToCsv(orders); // console.log(csvData)\n\n      const blob = new Blob([csvData], {\n        type: 'text/csv'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.setAttribute('hidden', '');\n      a.setAttribute('href', url);\n      a.setAttribute('download', 'download.csv');\n      document.body.appendChild(a);\n      a.click(); // console.log(order)\n      // console.log(this.state.orders)\n    };\n\n    this.state = {\n      mainData: {\n        orders: [],\n        provider_id: []\n      }\n    };\n    this.getReports = this.getReports.bind(this);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.getReports,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Download Refunded Orders Report\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/gigiz/Documents/Test-App/src/App.js"],"names":["React","Component","Header","App","constructor","getReports","response","fetch","ordersData","json","setState","mainData","orders","v3","data","provider_id","v2","state","map","order","ID","id","Order_ID","order_id","Date","created","Amount","total_amount","Payment_Provider_Name","payments","Payment_Provider_ID","v2_Order","payment_provider_id","toString","replace","Refund_Reason","reason","objectToCsv","csvRows","headers","Object","keys","push","row","values","header","escaped","join","csvData","blob","Blob","type","url","window","URL","createObjectURL","a","document","createElement","setAttribute","body","appendChild","click","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from './components/header'\nimport './App.scss'\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      mainData: {\n        orders: [],\n        provider_id: []\n      }\n    }\n    this.getReports = this.getReports.bind(this)\n  }\n\n  getReports = async () => {\n    const response = await fetch('https://bc-refunded-orders.herokuapp.com/all')\n    const ordersData = await response.json()\n\n    this.setState({\n      mainData: {\n        orders: ordersData.v3.data,\n        provider_id: ordersData.v2\n      }\n    })\n    \n    // console.log(this.state.mainData)\n    // console.log(this.state.provider_id)\n\n    let orders = this.state.mainData.orders.map(order => ({\n      ID: order.id,\n      Order_ID: order.order_id,\n      Date: order.created,\n      Amount: `$ ${order.total_amount}`,\n      Payment_Provider_Name: order.payments[0].provider_id,\n      Payment_Provider_ID: this.state.mainData.provider_id.map(v2_Order => (\n        order.order_id === v2_Order.id ? v2_Order.payment_provider_id : ''\n      )).toString().replace(\",\", \"\"),\n      Refund_Reason: order.reason\n    }))\n\n    // console.log(orders)\n    const objectToCsv = (order) => {\n\n      const csvRows = [];\n      const headers = Object.keys(order[0])\n      csvRows.push(headers);\n      \n      for (const row of order) {\n        const values = headers.map(header => {\n          const escaped = ('' + row[header]).replace(/\"/g, '\\\\\"')\n          return `\"${escaped}\"`\n        })\n        csvRows.push(values)\n      }\n      \n      return csvRows.join('\\n')\n    }\n    \n    let csvData = objectToCsv(orders)\n\n    // console.log(csvData)\n\n    const blob = new Blob([csvData], { type: 'text/csv' })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.setAttribute('hidden', '')\n    a.setAttribute('href', url)\n    a.setAttribute('download', 'download.csv')\n    document.body.appendChild(a)\n    a.click()\n\n\n    // console.log(order)\n    // console.log(this.state.orders)\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"body\">\n          <button onClick={this.getReports}>Download Refunded Orders Report</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}